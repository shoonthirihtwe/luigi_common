<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jp.co.ichain.luigi2.mapper.CommonContractMapper">
	<select id="selectContracts" resultType="ContractsVo" parameterType="hashmap">
		SELECT
			tenant_id,
			contract_no,
			contract_branch_no
		FROM
			contracts
		WHERE
			tenant_id = #{tenantId}
			AND contract_no = #{contractNo}
			<if test="baseDate != null">
				<![CDATA[AND FROM_UNIXTIME(#{baseDate}/1000) between effective_date and expiration_date]]>
				<![CDATA[AND (termination_date is null OR FROM_UNIXTIME(#{baseDate}/1000) <= termination_date)]]>
			</if>
		ORDER BY contract_branch_no desc
		LIMIT 1
	</select>
	<select id="selectBenefit" resultType="RiskHeadersVo" parameterType="hashmap">
		SELECT
			r.risk_sequence_no,
			r.benefit_text,
			r.benefit_base_amount,
			r.benefit_base_unit
		FROM
			risk_headers r
		INNER JOIN contracts ct
			ON r.tenant_id = ct.tenant_id
			AND r.contract_no = ct.contract_no
			AND r.contract_branch_no = ct.contract_branch_no
		WHERE
			ct.tenant_id = #{tenantId}
			AND ct.contract_no = #{contractNo}
			AND FROM_UNIXTIME(#{baseDate}/1000) between r.risk_start_date and r.risk_end_date
		ORDER BY risk_sequence_no ASC
	</select>
	<select id="selectClaimHeader" resultType="ClaimHeadersVo" parameterType="hashmap">
		SELECT
			claim_headers.claimant_category,
		    claim_headers.claimant_sei_knj,
		    claim_headers.claimant_mei_knj,
		    claim_headers.claimant_sei_kana,
		    claim_headers.claimant_mei_kana,
		    claim_headers.claimant_date_of_birth,
		    claim_headers.claimant_addr_knj_1,
		    claim_headers.claimant_addr_knj_2,
		    claim_headers.claimant_addr_knj_3,
		    claim_headers.claimant_addr_knj_pref,
		    claim_headers.claimant_addr_zip_code,
		    claim_headers.tel_no,
		    claim_headers.contact_tel_no,
		    claim_headers.email,
		    claim_headers.relationship
		FROM
		    claim_headers
		WHERE
			claim_headers.tenant_id = #{tenantId}
			AND claim_headers.contract_no = #{contractNo}
			AND claim_headers.contract_branch_no = #{contractBranchNo}
		LIMIT 1
	</select>
	<select id="selectInsured" resultType="ClaimCustomerVo" parameterType="hashmap">
		SELECT 
		    contracts.id AS contractId,
		    CASE
		        WHEN customers.corporate_individual_flag = '1' THEN customers_individual.name_knj_sei
		        WHEN customers.corporate_individual_flag = '2' THEN customers_corporate.rep10e_name_knj_sei
		        ELSE NULL
		    END AS name_knj_sei,
		    CASE
		        WHEN customers.corporate_individual_flag = '1' THEN customers_individual.name_knj_mei
		        WHEN customers.corporate_individual_flag = '2' THEN customers_corporate.rep10e_name_knj_mei
		        ELSE NULL
		    END AS name_knj_mei,
		    CASE
		        WHEN customers.corporate_individual_flag = '1' THEN customers_individual.name_kana_sei
		        WHEN customers.corporate_individual_flag = '2' THEN customers_corporate.rep10e_name_kana_sei
		        ELSE NULL
		    END AS name_kana_sei,
		    CASE
		        WHEN customers.corporate_individual_flag = '1' THEN customers_individual.name_kana_mei
		        WHEN customers.corporate_individual_flag = '2' THEN customers_corporate.rep10e_name_kana_mei
		        ELSE NULL
		    END AS name_kana_mei,
		    CASE
		        WHEN customers.corporate_individual_flag = '1' THEN customers_individual.date_of_birth
		        WHEN customers.corporate_individual_flag = '2' THEN customers_corporate.rep10e_date_of_birth
		        ELSE NULL
		    END AS date_of_birth,
		    CASE
		        WHEN
		            customers.corporate_individual_flag = '1'
		        THEN
		            CONCAT(customers_individual.addr_knj_pref,
		                    customers_individual.addr_knj_1,
		                    customers_individual.addr_knj_2,
		                    customers_individual.addr_knj_3)
		        WHEN
		            customers.corporate_individual_flag = '2'
		        THEN
		            CONCAT(customers_corporate.rep10e_addr_knj_pref,
		                    customers_corporate.rep10e_addr_knj_1,
		                    customers_corporate.rep10e_addr_knj_2,
		                    customers_corporate.rep10e_addr_knj_3)
		        ELSE NULL
		    END AS address,
		    CASE
		        WHEN customers.corporate_individual_flag = '1' THEN customers_individual.addr_tel1
		        WHEN customers.corporate_individual_flag = '2' THEN customers_corporate.rep10e_addr_tel1
		        ELSE NULL
		    END AS tel_no,
		    claim_headers.contact_tel_no,
		    CASE
		        WHEN customers.corporate_individual_flag = '1' THEN customers_individual.email
		        WHEN customers.corporate_individual_flag = '2' THEN customers_corporate.contact_email
		        ELSE NULL
		    END AS email
		FROM
		    contracts
		        INNER JOIN
		    claim_headers ON contracts.tenant_id = claim_headers.tenant_id
		        AND contracts.contract_no = claim_headers.contract_no
		        AND contracts.contract_branch_no = claim_headers.contract_branch_no
		        INNER JOIN
		    customers ON contracts.insured_customer_id = customers.customer_id
		        AND contracts.tenant_id = customers.tenant_id
		        LEFT OUTER JOIN
		    customers_individual ON contracts.insured_customer_id = customers_individual.customer_id
		        AND contracts.tenant_id = customers_individual.tenant_id
		        AND customers.corporate_individual_flag = '1'
		        LEFT OUTER JOIN
		    customers_corporate ON contracts.insured_customer_id = customers_corporate.customer_id
		        AND contracts.tenant_id = customers_corporate.tenant_id
		        AND customers.corporate_individual_flag = '2'
		WHERE
			contracts.tenant_id = #{tenantId}
			AND contracts.contract_no = #{contractNo}
			AND contracts.contract_branch_no = #{contractBranchNo}
		LIMIT 1
	</select>
	<select id="selectBeneficiaries" resultType="ClaimCustomerVo" parameterType="hashmap">
		SELECT 
		    contracts.id as contractId,
		    beneficiaries.name_knj_sei,
		    beneficiaries.name_knj_mei,
		    beneficiaries.name_kana_sei,
		    beneficiaries.name_kana_mei,
		    beneficiaries.date_of_birth,
		    CONCAT(beneficiaries.addr_knj_pref,
		            beneficiaries.addr_knj_1,
		            beneficiaries.addr_knj_2,
		            beneficiaries.addr_knj_3) AS address
		FROM
		    beneficiaries
		        INNER JOIN
		    contracts ON beneficiaries.contract_no = contracts.contract_no
		        AND beneficiaries.contract_branch_no = contracts.contract_branch_no
		        AND beneficiaries.tenant_id = contracts.tenant_id
		WHERE
			beneficiaries.tenant_id = #{tenantId}
			AND beneficiaries.contract_no = #{contractNo}
			AND beneficiaries.contract_branch_no = #{contractBranchNo}
			<![CDATA[AND FROM_UNIXTIME(#{baseDate}/1000) between beneficiaries.start_date and beneficiaries.end_date]]>
	</select>
	<select id="selectMaxContractBranchNo" resultType="string" parameterType="hashmap">
        SELECT 
            IFNULL(MAX(contract_branch_no),'01')
        FROM
            contracts
        WHERE
            tenant_id = #{tenantId}
            AND contract_no = #{contractNo}
    </select>
    <select id="selectSumUpBenefits" resultType="map" parameterType="hashmap">
        SELECT 
            bg.benefit_group_type AS benefitGroupType,
            IFNULL(SUM(IFNULL(b.sum_up_value, 0)), 0) AS sumUpValue
        FROM
            contracts c
            JOIN benefits b ON c.sales_plan_code=b.sales_plan_code
            AND c.sales_plan_type_code=b.sales_plan_type_code
            AND c.tenant_id=b.tenant_id
            JOIN benefits_mt_benefit_group_types bg ON bg.tenant_id=c.tenant_id
            AND bg.sales_plan_code=c.sales_plan_code
            AND bg.sales_plan_type_code=c.sales_plan_type_code
        WHERE
            c.tenant_id = #{tenantId}
            AND (c.contract_status='U' OR c.contract_status='40')
            <if test="targetType =='PH'">
            AND c.contractor_customer_id IN
            <foreach collection="customerIdList" item="customerId" index="index" separator="," open="(" close=")">
             #{customerId}
             </foreach>
            </if>
            <if test="targetType =='IN'">
            AND c.insured_customer_id IN 
            <foreach collection="customerIdList" item="customerId" index="index" separator="," open="(" close=")">
             #{customerId}
             </foreach>
            </if>
            group by bg.benefit_group_type
    </select>
    <select id="selectSumUpCheckMaps" resultType="SumUpCheckMapsVo" parameterType="hashmap">
        SELECT 
            bgt.type_code AS benefitGroupType,
            bgt.type_name AS benefitGroupTypeName,
            sm.sum_up_amount,
            sm.target_type
        FROM
            benefits_mt_benefit_group_types bg 
            JOIN sum_up_check_maps sm ON bg.tenant_id=sm.tenant_id
            AND bg.benefit_group_type=sm.benefit_group_type
            JOIN benefit_group_types bgt ON sm.tenant_id=bgt.tenant_id
            AND sm.benefit_group_type=bgt.type_code
        WHERE
            bg.tenant_id = #{tenantId}
            AND sm.target_type=#{targetType}
            AND sm.benefit_group_type=#{benefitGroupType}
            AND (start_date <![CDATA[<=]]> #{onlineDate} AND end_date >= #{onlineDate})
            group by sm.benefit_group_type
    </select>
    <update id="updateSumupCheckResult" parameterType="hashmap">
        UPDATE 
            ${table}
        <set>
            underwriting_result=JSON_SET(IFNULL(underwriting_result,'{}'), '$.auto_underwriting', IFNULL(underwriting_result->'$.auto_underwriting', JSON_OBJECT())),
            underwriting_result=JSON_SET(underwriting_result, '$.auto_underwriting.sum_up_check', IFNULL(underwriting_result->'$.auto_underwriting.sum_up_check', JSON_OBJECT())),
            underwriting_result=JSON_SET(underwriting_result, '$.auto_underwriting.sum_up_check.policy_holder', IFNULL(underwriting_result->'$.auto_underwriting.sum_up_check.policy_holder', CAST('{"target":"契約者","check_list":[]}' AS JSON))),
            underwriting_result=JSON_SET(underwriting_result, '$.auto_underwriting.sum_up_check.insured', IFNULL(underwriting_result->'$.auto_underwriting.sum_up_check.insured', CAST('{"target":"被保険者","check_list":[]}' AS JSON))),
            <if test="paramMap.policyHolderJson != null">
            underwriting_result=JSON_SET(underwriting_result, '$.auto_underwriting.sum_up_check.policy_holder.check_list', CAST(#{paramMap.policyHolderJson} AS JSON)),
            </if>
            <if test="paramMap.insuredJson != null">
            underwriting_result=JSON_SET(underwriting_result, '$.auto_underwriting.sum_up_check.insured.check_list', CAST(#{paramMap.insuredJson} AS JSON)),
            </if>
            update_count=update_count + 1,
            updated_by=#{paramMap.updatedBy}
        </set>
        WHERE
            tenant_id=#{paramMap.tenantId} 
        AND contract_no =#{paramMap.contractNo}
    </update>
</mapper>
